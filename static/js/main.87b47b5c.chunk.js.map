{"version":3,"sources":["components/Calculator.tsx","components/Drawer.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","slider","width","margin","Calculator","props","classes","measurementSum","maxLength","length","height","setLength","setWidth","setHeight","className","Slider","defaultValue","value","step","marks","min","max","onChange","e","newValue","newLength","Math","floor","newWidth","newHeight","button","background","marginTop","backdrop","position","top","left","zIndex","span","SetupDrawer","setMeasurementSum","setMaxLength","useState","menuOpen","setMenuOpen","toggleMenu","alert","Button","onClick","Backdrop","open","Drawer","variant","anchor","stopPropagation","type","newSum","target","newMaxLength","App","ReactDOM","render","document","getElementById"],"mappings":"mNAKMA,EAAYC,YAAW,CACzBC,OAAQ,CACJC,MAAO,IACPC,OAAQ,UAyFDC,MA1ER,SAAoBC,GAEvB,IAAMC,EAAUP,IACVQ,EAAiBF,EAAME,eACvBC,EAAYH,EAAMG,UAClBC,EAASJ,EAAMI,OACfP,EAAQG,EAAMH,MACdQ,EAASL,EAAMK,OACfC,EAAYN,EAAMM,UAClBC,EAAWP,EAAMO,SACjBC,EAAYR,EAAMQ,UA+BxB,OACI,8BACI,sBAAKC,UAAU,MAAf,UACI,sBAAKA,UAAWR,EAAQL,OAAxB,UACI,4CAAeQ,GAAkB,KACjC,cAACM,EAAA,EAAD,CACIC,aAAc,EACdC,MAAOR,EACPS,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAiB,EAAZb,EACLc,SAzCpB,SAA4BC,EAAQC,GAEhC,IAAMC,EAAYD,EAElBb,EAAUc,GACVb,EAASc,KAAKC,OAAOpB,EAAiBkB,GAAa,IACnDZ,EAAUa,KAAKC,OAAOpB,EAAiBkB,GAAa,KAEjDA,GAAavB,GAASuB,GAAaf,KAClCC,EAAUe,KAAKC,MAAMpB,EAAiB,IACtCK,EAASc,KAAKC,MAAMpB,EAAiB,IACrCM,EAAUa,KAAKC,MAAMpB,EAAiB,WAiClC,sBAAKO,UAAWR,EAAQL,OAAxB,UACI,2CAAcC,GAAgB,KAC9B,cAACa,EAAA,EAAD,CACIC,aAAc,EACdC,MAAOf,EACPgB,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAKZ,EACLa,SAtCpB,SAAiCC,EAAQC,GAErC,IAAMI,EAAWJ,EACXK,EAAYH,KAAKC,OAAOpB,EAAiBE,EAAqB,EAAXmB,GAAiB,GAE1EhB,EAASgB,GACTf,EAAUgB,IAEPA,GAAa,GAAK3B,EAAQ0B,IAAa,KACtCf,EAAU,GACVD,EAASc,KAAKC,MAAMpB,EAAiBE,EAAS,GAAK,UA+B/C,4CAAeC,GAAkB,W,wBCrF3CX,EAAYC,YAAW,CACzB8B,OAAQ,CACJC,WAAY,+CACZC,UAAW,QAEfC,SAAU,CACNC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,IAEZC,KAAM,CACFN,UAAW,UAqFJO,MAvER,SAAqBlC,GAExB,IAAMC,EAAUP,IACVQ,EAAiBF,EAAME,eACvBC,EAAYH,EAAMG,UAClBgC,EAAoBnC,EAAMmC,kBAC1BC,EAAepC,EAAMoC,aACrB9B,EAAYN,EAAMM,UAClBC,EAAWP,EAAMO,SACjBC,EAAYR,EAAMQ,UAExB,EAAkC6B,oBAAS,GAA3C,mBAAQC,EAAR,KAAkBC,EAAlB,KAEA,SAASC,IACY,GAAbrC,GAAoC,GAAlBD,EAClBuC,MAAM,kDAGNF,GAAaD,GAoCrB,OACI,gCACI,cAACI,EAAA,EAAD,CAAQjC,UAAWR,EAAQwB,OAAQkB,QAASH,EAA5C,+BACA,cAACI,EAAA,EAAD,CAAUnC,UAAWR,EAAQ2B,SAAUiB,KAAMP,EAAUK,QAASH,EAAhE,SACI,eAACM,EAAA,EAAD,CAAQC,QAAQ,aAAaC,OAAO,SAASH,KAAMP,EAAUK,QApCzE,SAAuBzB,GACnBA,EAAE+B,mBAmCM,UACI,sBAAMxC,UAAWR,EAAQgC,KAAzB,uIACA,iGACA,sBAAMxB,UAAWR,EAAQgC,KAAzB,sBACA,uBAAOiB,KAAK,SAASnC,IAAI,IAAIE,SApC7C,SAA8BC,GAE1B,IAAMiC,EAAS9B,KAAKC,MAAMJ,EAAEkC,OAAOxC,OAEnCuB,EAAkBgB,GAClB7C,EAAUe,KAAKC,MAAM6B,EAAS,IAC9B5C,EAASc,KAAKC,MAAM6B,EAAS,IAC7B3C,EAAUa,KAAKC,MAAM6B,EAAS,IAC9Bf,EAAaf,KAAKC,MAAM6B,EAAS,IAE9BA,GAAU,GACThB,EAAkB,IAyBmDvB,MAAOV,IACpE,8CACA,uBAAOgD,KAAK,SAASnC,IAAI,IAAIC,IAAKd,EAAgB,EAAGe,SAvBrE,SAAyBC,GAErB,IAAMmC,EAAehC,KAAKC,MAAMJ,EAAEkC,OAAOxC,OACzCwB,EAAaiB,GACVA,EAAenD,EAAiB,IAC/BuC,MAAM,+CACNL,EAAalC,EAAiB,IAE/BmD,GAAgB,GACfjB,EAAa,IAc2ExB,MAAOT,aCzD5FmD,MAlCR,WAEH,MAA8CjB,mBAAS,GAAvD,mBAAQnC,EAAR,KAAwBiC,EAAxB,KACA,EAAoCE,mBAAS,GAA7C,mBAAQlC,EAAR,KAAmBiC,EAAnB,KACA,EAA8BC,mBAAS,GAAvC,mBAAQjC,EAAR,KAAgBE,EAAhB,KACA,EAA4B+B,mBAAS,GAArC,mBAAQxC,EAAR,KAAeU,EAAf,KACA,EAA8B8B,mBAAS,GAAvC,mBAAQhC,EAAR,KAAgBG,EAAhB,KAEA,OACI,sBAAKC,UAAU,MAAf,UACI,+CACA,cAAC,EAAD,CACIP,eAAkBA,EAClBC,UAAaA,EACbC,OAAUA,EACVP,MAASA,EACTQ,OAAUA,EACVC,UAAaA,EACbC,SAAYA,EACZC,UAAaA,IAEjB,cAAC,EAAD,CACIN,eAAkBA,EAClBC,UAAaA,EACbgC,kBAAqBA,EACrBC,aAAgBA,EAChB9B,UAAaA,EACbC,SAAYA,EACZC,UAAaA,QC7B7B+C,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.87b47b5c.chunk.js","sourcesContent":["import React from 'react';\nimport '../style.css';\nimport { Slider } from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    slider: {\n        width: 300,\n        margin: 'auto'\n    },\n});\n\ntype Props = {\n    measurementSum: number,\n    maxLength: number,\n    length: number,\n    width: number,\n    height: number,\n    setLength: React.Dispatch<React.SetStateAction<number>>,\n    setWidth: React.Dispatch<React.SetStateAction<number>>,\n    setHeight: React.Dispatch<React.SetStateAction<number>>,\n}\n\nexport function Calculator(props: Props) {\n\n    const classes = useStyles();\n    const measurementSum = props.measurementSum;\n    const maxLength = props.maxLength;\n    const length = props.length;\n    const width = props.width;\n    const height = props.height;\n    const setLength = props.setLength;\n    const setWidth = props.setWidth;\n    const setHeight = props.setHeight;\n\n    function handleLengthChange(e: any, newValue: number | number[]) {\n    \n        const newLength = newValue as number;\n\n        setLength(newLength);\n        setWidth(Math.floor((measurementSum - newLength) / 4));\n        setHeight(Math.floor((measurementSum - newLength) / 4));\n\n        if(newLength <= width || newLength <= height) {\n            setLength(Math.floor(measurementSum / 5));\n            setWidth(Math.floor(measurementSum / 5));\n            setHeight(Math.floor(measurementSum / 5));\n        }\n    }\n\n    function handleWidthHeightChange(e: any, newValue: number | number[]) {\n\n        const newWidth = newValue as number;\n        const newHeight = Math.floor((measurementSum - length - (newWidth * 2)) / 2);\n\n        setWidth(newWidth);\n        setHeight(newHeight);\n\n        if(newHeight <= 1 || width - newWidth <= -2) {\n            setHeight(1);\n            setWidth(Math.floor(measurementSum - length - 2) / 2); \n        }   \n    }\n\n    return (\n        <div>\n            <div className='app'>\n                <div className={classes.slider}>\n                    <span>length: {length ? length : 0}</span>\n                    <Slider\n                        defaultValue={0}\n                        value={length}\n                        step={1}\n                        marks\n                        min={1}\n                        max={maxLength * 1}\n                        onChange={handleLengthChange}\n                    />\n                </div>\n                <div className={classes.slider}>\n                    <span>width: {width ? width : 0}</span>\n                    <Slider\n                        defaultValue={0}\n                        value={width}\n                        step={1}\n                        marks\n                        min={1}\n                        max={length}\n                        onChange={handleWidthHeightChange}\n                    />\n                </div>\n                <span>height: {height ? height : 0}</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Calculator;\n","import React, { useState } from 'react';\nimport '../style.css';\nimport { Drawer, Button, Backdrop } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles({\n    button: {\n        background: 'linear-gradient(45deg, orange 30%, teal 90%)',\n        marginTop: '80px',\n    },\n    backdrop: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        zIndex: 20\n    },\n    span: {\n        marginTop: '10px',\n    }\n});\n\ntype Props = {\n    measurementSum: number,\n    maxLength: number,\n    setMeasurementSum: React.Dispatch<React.SetStateAction<number>>,\n    setMaxLength: React.Dispatch<React.SetStateAction<number>>,\n    setLength: React.Dispatch<React.SetStateAction<number>>,\n    setWidth: React.Dispatch<React.SetStateAction<number>>,\n    setHeight: React.Dispatch<React.SetStateAction<number>>\n};\n\nexport function SetupDrawer(props: Props) {\n\n    const classes = useStyles();\n    const measurementSum = props.measurementSum;\n    const maxLength = props.maxLength;\n    const setMeasurementSum = props.setMeasurementSum;\n    const setMaxLength = props.setMaxLength;\n    const setLength = props.setLength;\n    const setWidth = props.setWidth;\n    const setHeight = props.setHeight;\n\n    const [ menuOpen, setMenuOpen ] = useState(true);\n\n    function toggleMenu () {\n        if (maxLength == 0 || measurementSum == 0) {\n            alert('Please enter values for max sum and max length');\n        }\n        else {\n            setMenuOpen(!menuOpen);\n        }\n    }\n\n    function preventClose (e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n        e.stopPropagation();\n    }\n\n    function handleMeasurementSum(e: any) {\n\n        const newSum = Math.floor(e.target.value);\n\n        setMeasurementSum(newSum);\n        setLength(Math.floor(newSum / 5));\n        setWidth(Math.floor(newSum / 5));\n        setHeight(Math.floor(newSum / 5));\n        setMaxLength(Math.floor(newSum / 2));\n\n        if(newSum <= 0) {\n            setMeasurementSum(0);\n        }\n    }\n\n    function handleMaxLength(e: any) {\n    \n        const newMaxLength = Math.floor(e.target.value);\n        setMaxLength(newMaxLength);\n        if(newMaxLength > measurementSum - 4) {\n            alert(\"The max length can't exceed the max sum - 4\");\n            setMaxLength(measurementSum - 4);\n        }\n        if(newMaxLength <= 0) {\n            setMaxLength(0);\n        }\n    }\n\n    return (\n        <div>\n            <Button className={classes.button} onClick={toggleMenu}>Chnage max values</Button>\n            <Backdrop className={classes.backdrop} open={menuOpen} onClick={toggleMenu} >\n                <Drawer variant=\"persistent\" anchor=\"bottom\" open={menuOpen} onClick={preventClose}>\n                    <span className={classes.span}> Before You go further, please enter the maximal sum of length and the circumference measured perpendicular to the length</span>\n                    <span>and the maximal length allowed by the courier of Your choice.</span>\n                    <span className={classes.span}> max sum</span>\n                    <input type=\"number\" min='1' onChange={handleMeasurementSum} value={measurementSum}/>\n                    <span>max length</span>\n                    <input type=\"number\" min='1' max={measurementSum -4} onChange={handleMaxLength} value={maxLength}/>\n                </Drawer>\n            </Backdrop>\n        </div>\n    );\n}\n\nexport default SetupDrawer;\n","import React, { useState } from 'react';\nimport './style.css';\nimport Calculator from './components/Calculator';\nimport SetupDrawer from './components/Drawer';\n\nexport function App() {\n\n    const [ measurementSum, setMeasurementSum ] = useState(0);\n    const [ maxLength, setMaxLength ] = useState(0);\n    const [ length, setLength ] = useState(1);\n    const [ width, setWidth ] = useState(1);\n    const [ height, setHeight ] = useState(1);\n\n    return (\n        <div className='app'>\n            <h1>THE BOX-SIZER</h1>\n            <Calculator \n                measurementSum = {measurementSum} \n                maxLength = {maxLength}\n                length = {length}\n                width = {width}\n                height = {height}\n                setLength = {setLength}\n                setWidth = {setWidth}\n                setHeight = {setHeight}\n            />\n            <SetupDrawer\n                measurementSum = {measurementSum}\n                maxLength = {maxLength}\n                setMeasurementSum = {setMeasurementSum}\n                setMaxLength = {setMaxLength}\n                setLength = {setLength}\n                setWidth = {setWidth}\n                setHeight = {setHeight}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}